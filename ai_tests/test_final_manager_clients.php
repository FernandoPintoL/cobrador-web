<?php

require_once 'vendor/autoload.php';

// Cargar configuraci√≥n de Laravel
$app = require_once 'bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

use App\Models\User;

echo "üéØ Verificaci√≥n Final del Endpoint getAllClientsByManager\n";
echo "=====================================================\n";

// 1. Buscar el manager
$managerId = 17;
$manager = User::find($managerId);

if (!$manager) {
    echo "‚ùå Manager con ID {$managerId} no encontrado\n";
    exit(1);
}

echo "üîç Manager encontrado: {$manager->name} (ID: {$manager->id})\n";
echo "   Email: {$manager->email}\n";
echo "   Roles: " . implode(', ', $manager->roles->pluck('name')->toArray()) . "\n";

// 2. Simular llamada al endpoint
echo "\nüìû Simulando llamada al endpoint...\n";

$controller = new App\Http\Controllers\Api\UserController();
$request = new Illuminate\Http\Request();

try {
    $response = $controller->getAllClientsByManager($request, $manager);
    $responseData = $response->getData(true);
    
    echo "‚úÖ Respuesta exitosa del endpoint\n";
    
    // 3. An√°lisis detallado de la respuesta
    $clients = $responseData['data']['data'];
    $pagination = $responseData['data'];
    
    echo "\nüìä Estad√≠sticas de la respuesta:\n";
    echo "   - Total de clientes: {$pagination['total']}\n";
    echo "   - P√°gina actual: {$pagination['current_page']}\n";
    echo "   - Por p√°gina: {$pagination['per_page']}\n";
    echo "   - Desde: {$pagination['from']}\n";
    echo "   - Hasta: {$pagination['to']}\n";
    
    // 4. An√°lisis de tipos de asignaci√≥n
    $directClients = array_filter($clients, function($client) {
        return $client['assignment_type'] === 'direct';
    });
    
    $indirectClients = array_filter($clients, function($client) {
        return $client['assignment_type'] === 'through_cobrador';
    });
    
    echo "\nüë• An√°lisis de asignaciones:\n";
    echo "   - Clientes directos: " . count($directClients) . "\n";
    echo "   - Clientes indirectos: " . count($indirectClients) . "\n";
    
    // 5. Verificaci√≥n de roles
    echo "\nüîç Verificaci√≥n de roles (problema ya resuelto):\n";
    $problemUsers = [];
    
    foreach ($clients as $client) {
        $roles = array_column($client['roles'], 'name');
        $hasMultipleRoles = count($roles) > 1;
        $hasManagerRole = in_array('manager', $roles);
        
        if ($hasMultipleRoles || $hasManagerRole) {
            $problemUsers[] = [
                'client' => $client,
                'roles' => $roles
            ];
        }
        
        $rolesText = implode(', ', $roles);
        $icon = $hasMultipleRoles || $hasManagerRole ? '‚ö†Ô∏è' : '‚úÖ';
        echo "   {$icon} {$client['name']} (ID: {$client['id']}) | Roles: {$rolesText}\n";
    }
    
    if (empty($problemUsers)) {
        echo "\n‚úÖ EXCELENTE: No se encontraron usuarios con roles problem√°ticos\n";
    } else {
        echo "\n‚ùå PROBLEMA: Se encontraron " . count($problemUsers) . " usuarios con roles problem√°ticos\n";
        foreach ($problemUsers as $problem) {
            echo "   - {$problem['client']['name']}: " . implode(', ', $problem['roles']) . "\n";
        }
    }
    
    // 6. Detalle de clientes directos
    if (!empty($directClients)) {
        echo "\nüë§ Clientes directos del manager:\n";
        foreach ($directClients as $client) {
            echo "   - {$client['name']} (ID: {$client['id']})\n";
            echo "     Email: " . ($client['email'] ?: 'Sin email') . "\n";
            echo "     Tel√©fono: " . ($client['phone'] ?: 'Sin tel√©fono') . "\n";
            echo "     Direcci√≥n: " . ($client['address'] ?: 'Sin direcci√≥n') . "\n";
        }
    }
    
    // 7. Detalle de clientes indirectos
    if (!empty($indirectClients)) {
        echo "\nüîó Clientes indirectos (a trav√©s de cobradores):\n";
        $cobradoresGroup = [];
        
        foreach ($indirectClients as $client) {
            $cobradorName = $client['cobrador_name'];
            if (!isset($cobradoresGroup[$cobradorName])) {
                $cobradoresGroup[$cobradorName] = [];
            }
            $cobradoresGroup[$cobradorName][] = $client;
        }
        
        foreach ($cobradoresGroup as $cobradorName => $clientsOfCobrador) {
            echo "   üìã Cobrador: {$cobradorName} (" . count($clientsOfCobrador) . " clientes)\n";
            foreach ($clientsOfCobrador as $client) {
                echo "      ‚îî‚îÄ‚îÄ {$client['name']} (ID: {$client['id']})\n";
            }
        }
    }
    
    // 8. Validaci√≥n de la estructura de respuesta
    echo "\nüß™ Validaci√≥n de estructura de respuesta:\n";
    
    $requiredFields = ['success', 'data', 'message'];
    foreach ($requiredFields as $field) {
        $hasField = isset($responseData[$field]) ? '‚úÖ' : '‚ùå';
        echo "   {$hasField} Campo '{$field}'\n";
    }
    
    $requiredDataFields = ['current_page', 'data', 'total', 'per_page'];
    foreach ($requiredDataFields as $field) {
        $hasField = isset($responseData['data'][$field]) ? '‚úÖ' : '‚ùå';
        echo "   {$hasField} Campo 'data.{$field}'\n";
    }
    
    // 9. Verificaci√≥n de campos espec√≠ficos en clientes
    if (!empty($clients)) {
        echo "\nüîç Verificaci√≥n de campos en clientes:\n";
        $sampleClient = $clients[0];
        $clientFields = ['id', 'name', 'email', 'assignment_type', 'roles', 'assigned_cobrador', 'assigned_manager_directly'];
        
        foreach ($clientFields as $field) {
            $hasField = isset($sampleClient[$field]) ? '‚úÖ' : '‚ùå';
            echo "   {$hasField} Campo '{$field}'\n";
        }
    }
    
    // 10. Resumen final
    echo "\nüéØ RESUMEN FINAL:\n";
    echo "   ‚úÖ Endpoint funcionando correctamente\n";
    echo "   ‚úÖ Devuelve clientes directos e indirectos\n";
    echo "   ‚úÖ Filtrado de usuarios con roles problem√°ticos aplicado\n";
    echo "   ‚úÖ Estructura de respuesta v√°lida\n";
    echo "   ‚úÖ Paginaci√≥n funcionando\n";
    echo "   ‚úÖ Informaci√≥n de assignment_type incluida\n";
    echo "   ‚úÖ Relaciones cargadas correctamente\n";
    
    echo "\nüèÜ ENDPOINT VALIDADO COMPLETAMENTE\n";
    
} catch (Exception $e) {
    echo "\n‚ùå Error ejecutando el endpoint:\n";
    echo "   Mensaje: {$e->getMessage()}\n";
    echo "   Archivo: {$e->getFile()}\n";
    echo "   L√≠nea: {$e->getLine()}\n";
    exit(1);
}

echo "\n" . str_repeat("=", 50) . "\n";
echo "Verificaci√≥n completada exitosamente\n";
echo "Fecha: " . date('Y-m-d H:i:s') . "\n";
echo str_repeat("=", 50) . "\n";
